diff --git a/lib/Driver/ToolChains.cpp b/lib/Driver/ToolChains.cpp
index 525c05c..9d13c1e 100644
--- a/lib/Driver/ToolChains.cpp
+++ b/lib/Driver/ToolChains.cpp
@@ -2191,6 +2191,9 @@ Linux::Linux(const Driver &D, const llvm::Triple &Triple, const ArgList &Args)
   }
   addPathIfExists(SysRoot + "/lib", Paths);
   addPathIfExists(SysRoot + "/usr/lib", Paths);
+
+  if (GetCXXStdlibType(Args) == ToolChain::CST_Libcxx)
+    addPathIfExists(getDriver().InstalledDir + "/../lib", Paths);
 }
 
 bool Linux::HasNativeLLVMSupport() const {
@@ -2375,6 +2378,8 @@ void Linux::AddClangCXXStdlibIncludeArgs(const ArgList &DriverArgs,
     // libc++ is always installed at a fixed path on Linux currently.
     addSystemInclude(DriverArgs, CC1Args,
                      getDriver().SysRoot + "/usr/include/c++/v1");
+	addSystemInclude(DriverArgs, CC1Args, 
+                     getDriver().InstalledDir + "/../include/c++/v1");
     return;
   }
 
@@ -2411,6 +2416,25 @@ void Linux::AddClangCXXStdlibIncludeArgs(const ArgList &DriverArgs,
   }
 }
 
+void Linux::AddCXXStdlibLibArgs(const ArgList &Args,
+                                 ArgStringList &CmdArgs) const {
+  switch (GetCXXStdlibType(Args)) {
+  case ToolChain::CST_Libcxx:
+    CmdArgs.push_back("-lc++");
+    CmdArgs.push_back("-lc++abi");
+    CmdArgs.push_back("-lunwind");
+    if (!Args.hasArg(options::OPT_static)) {
+      CmdArgs.push_back(Args.MakeArgString(std::string("-rpath=") + getDriver().InstalledDir + "/../lib"));
+    }
+    else
+      CmdArgs.push_back("-lpthread");
+    break;
+  case ToolChain::CST_Libstdcxx:
+    CmdArgs.push_back("-lstdc++");
+    break;
+  }
+}
+
 /// DragonFly - DragonFly tool chain which can call as(1) and ld(1) directly.
 
 DragonFly::DragonFly(const Driver &D, const llvm::Triple& Triple, const ArgList &Args)
diff --git a/lib/Driver/ToolChains.h b/lib/Driver/ToolChains.h
index 4e0320e..e68a93c 100644
--- a/lib/Driver/ToolChains.h
+++ b/lib/Driver/ToolChains.h
@@ -515,6 +515,8 @@ public:
                                      ArgStringList &CC1Args) const;
   virtual void AddClangCXXStdlibIncludeArgs(const ArgList &DriverArgs,
                                             ArgStringList &CC1Args) const;
+  virtual void AddCXXStdlibLibArgs(const ArgList &Args,
+                                   ArgStringList &CmdArgs) const;
 
   std::string Linker;
   std::vector<std::string> ExtraOpts;
